import argparse
import pandas as pd
from planning.planning_helper import (
    session, planner, get_strain_sample, get_strain_item,
    submit_define_culture_condition, get_inducer_parameter,
    submit_inoculate_culture_plate, get_antibio_parameter,
    get_control_parameter, get_options_parameter, load_template_file
)
from agavepy.actors import get_context, get_client, send_bytes_result

plate_types = {'eppendorf': "Eppendorf 96 Deepwell Plate"}


def main(server, file, name, temp, plate):
    print("Running plan_experiment.py code")

    # Use canvas to organize plan
    db = session(server)
    canvas = planner.Planner(db)
    media_ObjectType = db.ObjectType.find_by_name('800 mL Liquid')
    culture_condition_list = []
    experimental_design_df = load_template_file(file)
    for index, row in experimental_design_df.iterrows():
        strain_sample = get_strain_sample(db, row)
        strain_item = get_strain_item(db, strain_sample, row)
        strain_ObjectType = db.ObjectType.find_by_name(
            row.Strain_containerType)
        media_sample = db.Sample.find_by_name(row.Media)
    # Fill in Define Culture Condition operation
        ccond_op = submit_define_culture_condition(
            canvas,
            strain_sample=strain_sample,
            strain_item=strain_item,
            strain_ObjectType=strain_ObjectType,
            media_sample=media_sample,
            media_ObjectType=media_ObjectType,
            replicates=row.Replicates,
            inducer_param=get_inducer_parameter(db, row),
            antibio_param=get_antibio_parameter(db, row),
            control_param=get_control_parameter(db, row),
            options_param=get_options_parameter(db, row)
        )
        culture_condition_list.append(ccond_op)

    incubation_temperature = temp

    plate_string = plate_types[plate]
    culture_plate_container = db.ObjectType.find_by_name(plate_string)
    options_param = {}
    submit_inoculate_culture_plate(
        canvas,
        culture_condition_list,
        incubation_temperature,
        culture_plate_container,
        options_param
    )

    # Fill in Inoculate Culture Plate -
    # TODO: change how predict count of plates generated by inoculate_culture_plate
    # Currently, counts total wells and plans output collections based on filling up plates
    # However, since the operation does not break up replicates it will create extra output plates that may go un-noticed!!
    # Or create an email after plate has been inoculated and inform user how many output plates were generated.

    # Saving Plan to server
    canvas.session.set_timeout(150)
    canvas.name = (name)
    canvas.layout.topo_sort()
    canvas.layout.draw()
    canvas.create()
    canvas.save()
    print()
    print("Your new plan {} can be found at: {}".format(
        name, canvas.url))
    print()


if __name__ == '__main__':
    ap = argparse.ArgumentParser()
    ap.add_argument("-s", "--server", default='Production',
                    help="The server that this plan will be planned in. Either Production, Nursery, or Local.")
    ap.add_argument("-f", "--file", required=True,
                    help="The name of the template that will be scripted.")
    ap.add_argument("-n", "--name", type=str,
                    default='Untitled Experiment', help="The name of your plan.")
    ap.add_argument("-t", "--temp", type=int, default=30,
                    help="The temperature that the culturing plate will be grown to saturation. Default will be 30C.")
    ap.add_argument("-p", "--plate", type=str, default='eppendorf')
    args = ap.parse_args()
    args_server = args.server
    args_file = args.file
    args_name = args.name
    args_temp = args.temp
    args_plate = args.plate
    main(args_server, args_file, args_name, args_temp, args_plate)
